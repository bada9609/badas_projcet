<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dev">

<!-- 
-->
	<!-- 샵 회원 가입 -->
	<insert id="insertShopmember" parameterType="smbean">
		insert into shopmember(
		member_id, 
		member_pw, 
		member_name, 
		member_addr, 
		member_addr2, 
		member_birth, 
		member_regdate, 
		member_email,
		member_number,
		member_point
		)values(
		#{member_id}, 
		#{member_pw}, 
		#{member_name}, 
		#{member_addr},
		#{member_addr2},
		#{member_birth},
		now(),
		#{member_email},
		#{member_number},
		2000000
		)
	</insert>
	
    <!-- 샵 회원 아이디 중복 체크 -->
    <select id="memberidCheck" parameterType="String" resultType="int">
        SELECT COUNT(member_id) 
        FROM shopmember
        WHERE member_id = #{member_id}
    </select>
    
    <!-- 샵회원 로그인 -->
    <select id="loginmember" resultType="smdto">
		select * from shopmember
	</select>
	
	<select id="loginmemberdata" resultType="smdto" parameterType="string">
		select * from shopmember where member_id= #{member_id}
	</select>
    
    <!-- 어드민 회원 가입 -->
	<insert id="insertAdmin" parameterType="sabean">
		insert into admin(
		admin_id, 
		admin_pw,
		admin_regdate
		)values(
		#{admin_id},
		#{admin_pw},
		now()
		)
	</insert>
	
    <!-- 샵 회원 아이디 중복 체크 -->
    <select id="adminidCheck" parameterType="String" resultType="int">
        SELECT COUNT(admin_id) 
        FROM admin
        WHERE admin_id = #{admin_id}
    </select>
    
    <!-- 어드민 로그인 -->
    <select id="loginadmin" resultType="sadto">
		select * from admin
	</select>
	
	<select id="loginadmindata" resultType="sadto" parameterType="string">
		select * from admin where admin_id= #{admin_id}
	</select>
	
	<!-- 카테고리 전체 불러오기 -->
	<select id="selectCategory" resultType="cadto">
		select category_id, category_type, category_name, category_regdate, category_useYN from category
	</select>
	
	<!-- 카테고리 선택 값만 불러오기 -->
	<select id="categorySelectList" resultType="cadto" parameterType="string">
		select category_id, category_type, category_name, category_regdate, category_useYN from category where category_type = #{mp_code}
	</select>
	
	<!-- 대분류 불러오기 -->
	<select id="selectCategoryType" resultType="ptdto">
		select mp_code, mp_name from product_type
	</select>
	
	 <!-- 카테고리 중복 체크 -->
    <select id="categoryCheck" parameterType="string" resultType="cadto">
        SELECT category_name
        FROM category
        WHERE category_useYN = "Y" and category_type = #{category_type}
    </select>
    
    <!-- 중분류 카테고리 대리고 오기 -->
    <select id="productCategory" parameterType="string" resultType="cadto">
    	SELECT category_name
    	FROM category
    	WHERE category_useYN = "Y" and category_type = #{product_type}
    </select>
    
    <!-- 카테고리 입력 -->
    <insert id="insertCategory" parameterType="cadto">
    	insert into category (
    		category_type,
    		category_name,
    		category_regdate
    	) values (
    		#{category_type},
    		#{category_name},
    		now()
    	)
    </insert>
    
    <!-- 카테고리 수정 불러오기 -->
    <select id="categorydata" parameterType="string" resultType="cadto">
		select category_id, category_type, category_name, category_useYN from category
		where category_id = #{category_id}
	</select>
	
	<!-- 카테고리 업데이트 전달 -->
	<update id="updateCategory" parameterType="cadto">
		update category set
			category_type=#{category_type},
			category_name=#{category_name},
			category_update=now(),
			category_useYN=#{category_useYN}
		where category_id=#{category_id}
	</update>
	
	<!-- 제품 데이터 입력 -->
	<insert id="insertProduct" parameterType="padto">
		insert into product (
			product_type,
			product_category,
			product_name,
			product_price,
			product_regdate,
			product_imageYN,
			product_maintext,
			product_subtext,
			product_size,
			product_color 
		) value (
			#{product_type},
			#{product_category},
			#{product_name},
			#{product_price},
			now(),
			#{product_imageYN},
			#{product_maintext},
			#{product_subtext},
			#{product_size},
			#{product_color}
		)
		<selectKey resultType="string" keyProperty="product_id" order="AFTER">
  			SELECT MAX(product_id) FROM product
  		</selectKey>  	
	</insert>
	<!-- 제품 이미지 입력 -->
	<insert id="insertProductImage" parameterType="iadto">
		insert into product_image (
			product_id,
			main_image_filepath,
			main_image_filename,
			main_image_uuid,
			image_regdate,
			sub_image_filepath,
			sub_image_filename,
			sub_image_uuid
		) value (
			#{product_id},
			#{main_image_filepath},
			#{main_image_filename},
			#{main_image_uuid},
			now(),
			#{sub_image_filepath},
			#{sub_image_filename},
			#{sub_image_uuid}
		)
	</insert>
	
	<!-- 상품 리스트 전체 출력 -->
	<select id="selectProduct" resultType="padto">
		SELECT product.product_id, product_name, product_type, 
			   product_category, product_price, product_useYN, product_regdate,
			   main_image_filename, main_image_filepath, 
			   main_image_uuid, sub_image_filepath, sub_image_filename, sub_image_uuid,
			   product_maintext, product_subtext, product_size, product_color
		FROM product LEFT OUTER JOIN product_image ON 
		product.product_id = product_image.product_id
		ORDER BY product.product_id ASC;
	</select>	
	
	<!-- 상품 데이터 출력 (상세보기) -->
	<select id="productSelect" parameterType="string" resultType="padto">
		SELECT product.product_id, product_name, product_type, 
			   product_category, product_price, product_useYN, product_regdate,
			   main_image_filename, main_image_filepath,
			   main_image_uuid, sub_image_filepath, sub_image_filename, sub_image_uuid,
			   product_maintext, product_subtext, product_size, product_color
		FROM product LEFT OUTER JOIN product_image ON 
		product.product_id = product_image.product_id
		WHERE product.product_id = #{product_id}
	</select>
	
	<!-- 제품 내용 업데이트 -->
	<update id="updateProduct" parameterType="padto">
		update product set
			product_type = #{product_type},
			product_category= #{product_category},
			product_name= #{product_name},
			product_price= #{product_price},
			product_update= now(),
			product_imageYN = #{product_imageYN},
			product_maintext = #{product_maintext},
			product_subtext = #{product_subtext},
			product_size = #{product_size},
			product_color = #{product_color}
		where product_id = #{product_id}
	</update>
	
	<!-- 상품 이미지 있으면 등록 없으면 새로 만들어 주기 (업데이트 용 -->
	<insert id="updateProductImage" parameterType="iadto">
		insert into product_image (
			product_id,
			main_image_filepath,
			main_image_filename,
			main_image_uuid,
			image_regdate,
			sub_image_filepath,
			sub_image_filename,
			sub_image_uuid
		) value (
			#{product_id},
			#{main_image_filepath},
			#{main_image_filename},
			#{main_image_uuid},
			now(),
			#{sub_image_filepath},
			#{sub_image_filename},
			#{sub_image_uuid}
		)
		ON DUPLICATE KEY UPDATE 
		main_image_filepath = #{main_image_filepath},
		main_image_filename = #{main_image_filename},
		main_image_uuid = #{main_image_uuid},
		image_regdate = now(),
		sub_image_filepath = #{sub_image_filepath},
		sub_image_filename = #{sub_image_filename},
		sub_image_uuid = #{sub_image_uuid}
	</insert>
	
	<!-- 이미지 삭제 -->
	<delete id="deleteImage" parameterType="string">
		delete from product_image where
		product_id=#{product_id}
	</delete>
	
	<!-- 고객용 상품 불러오기 -->
	<select id="showproduct" parameterType="hashmap" resultType="hashmap">
		SELECT product.product_id, product_name, product_type, 
			   product_category, product_price, product_useYN, product_regdate,
			   main_image_filename, main_image_filepath, 
			   main_image_uuid, sub_image_filepath, sub_image_filename, sub_image_uuid,
			   product_maintext, product_subtext, product_size, product_color
		FROM product LEFT OUTER JOIN product_image ON 
		product.product_id = product_image.product_id
		WHERE product_useYN = 'Y' and product_type = #{product_type}
		ORDER BY product.product_id ASC		
		limit #{pageStart}, #{perPageNum}
	</select>
	
	<!-- 상품 갯수 카운트 -->
	<select id="countproduct" resultType="int">
		SELECT count(product_id)
		FROM product
		WHERE product_useYN = 'Y' and product_type = #{product_type}
	</select>
	
	<!-- 고객용 상품 불러오기 (중분류 구분용) -->
	<select id="showproduct2" parameterType="hashmap" resultType="hashmap">
		SELECT product.product_id, product_name, product_type, 
			   product_category, product_price, product_useYN, product_regdate,
			   main_image_filename, main_image_filepath, 
			   main_image_uuid, sub_image_filepath, sub_image_filename, sub_image_uuid,
			   product_maintext, product_subtext, product_size, product_color
		FROM product LEFT OUTER JOIN product_image ON 
		product.product_id = product_image.product_id
		WHERE product_useYN = 'Y' and product_type = #{product_type} and product_category = #{product_category}
		ORDER BY product.product_id ASC		
		limit #{pageStart}, #{perPageNum}
	</select>
	
	<!-- 상품 갯수 카운트 (중분류 구분용) -->
	<select id="countproduct2" parameterType="String" resultType="int">
		SELECT count(product_id)
		FROM product
		WHERE product_useYN = 'Y' and product_category = #{product_category}
	</select>
	
	<!-- 상품 상세보기 -->
	<select id="productdetail" parameterType="string" resultType="padto">
		SELECT product.product_id, product_name, product_type, 
			   product_category, product_price, product_useYN, product_regdate,
			   main_image_filename, main_image_filepath, 
			   main_image_uuid, sub_image_filepath, sub_image_filename, sub_image_uuid,
			   product_maintext, product_subtext, product_size, product_color
		FROM product LEFT OUTER JOIN product_image ON 
		product.product_id = product_image.product_id
		WHERE product_useYN = 'Y' and product.product_id = #{product_id}
	</select>
	
	<!-- 상품 구매용 데이터 호출 -->
	<select id="orderprselect" parameterType="string" resultType="padto">
		SELECT product_id, product_name, product_price
		FROM product
		WHERE product_id = #{product_id}
	</select>
	
	<!-- 상품 구매용 고객 데이터 호출 -->
	<select id="orderIdselect" parameterType="string" resultType="smdto">
		SELECT member_id, member_name, member_addr, member_addr2, member_email,
			   member_number, member_point
		FROM shopmember
		WHERE member_id = #{member_id}
	</select>
	
	<!-- 회원 주문  -->
	<insert id="insertOrder" parameterType="opdto">
		insert into orders(
			order_customer_id,
			order_customer_name, 
			order_regdate,
			payment_type,
			order_dr_name,
			order_customer_addr, 
			order_customer_addr2, 
			order_customer_addr_detail, 
			order_customer_email,
			order_total_pay,
			product_id,
			product_name,
			product_size,
			product_color,
			product_quantity
		)values(
			#{order_customer_id}, 
			#{order_customer_name},
			now(),
			#{payment_type}, 
			#{order_dr_name},
			#{order_customer_addr},
			#{order_customer_addr2},
			#{order_customer_addr_detail},
			#{order_customer_email},
			#{order_total_pay},
			#{product_id},
			#{product_name},
			#{product_size},
			#{product_color},
			#{product_quantity}
		)
	</insert>
	
	<!-- 고객 주문 상태 확인용 -->
	<select id="countPaymentType" parameterType="string" resultType="opdto" >
		SELECT count(case when order_state = 1 then 1 end)AS payment_type1, 
				count(case when order_state = 2 then 1 end)AS payment_type2,  
				count(case when order_state = 3 then 1 end)AS payment_type3
		FROM orders
		WHERE order_customer_id = #{order_customer_id}
	</select>
	
	<!-- 고객 주문 내용 전체 출력 -->
	<select id="selectOrderProduct" parameterType="hashmap" resultType="opdto">
		SELECT *
		FROM orders
		Where order_customer_id = #{order_customer_id}
		ORDER BY order_id ASC
		limit #{pageStart}, #{perPageNum}
	</select>
	
	<!-- 고객 주문 내용 전체 출력 카운트 -->
	<select id="countorder_customer" parameterType="String" resultType="int">
		SELECT count(order_id)
		FROM orders
		WHERE order_customer_id = #{order_customer_id}
	</select>
	
	<!-- 고객 주문 구매결정 -->
	<update id="orderconfirms" parameterType="string">
		Update orders set
			order_state = 3
		WHERE order_id = #{order_id}
	</update>
	
	<!-- 어드민 주문 정보 확인 용 -->
	<select id="adminSelectOrder" parameterType="hashmap" resultType="opdto">
		SELECT *
		FROM orders
		ORDER BY order_regdate ASC		
		limit #{pageStart}, #{perPageNum}
	</select>
	
	<!-- 어드민 주문 내용 전체 출력 카운트 -->
	<select id="countorder" parameterType="String" resultType="int">
		SELECT count(order_id)
		FROM orders
	</select>
	
	<!-- 어드민 주문 상태 수정용 -->
	<select id="orderSelect" parameterType="string" resultType="opdto">
		SELECT *
		FROM orders
		WHERE order_id = #{order_id}
	</select>
	
	<!-- 주문 상태 어드민 업데이트 -->
	<update id="updateOrder" parameterType="opdto">
		update orders set
			order_state = #{order_state}
		where order_id = #{order_id}
	</update>
	
</mapper>
